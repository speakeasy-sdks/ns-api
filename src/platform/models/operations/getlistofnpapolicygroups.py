"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from platform import utils
from typing import Optional



@dataclasses.dataclass
class GetListOfNpaPolicyGroupsRequest:
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Return values only from specified fields"""
    filter: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': True }})
    r"""Query string based on query operaters"""
    limit: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Max number of policy groups to retrieve. Default will be all policy groups."""
    offset: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""The offset of the first policy group in the list to retrieve."""
    sortby: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortby', 'style': 'form', 'explode': True }})
    r"""Sort retrieved policy group by specified field. Default is policy group id"""
    sortorder: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortorder', 'style': 'form', 'explode': True }})
    r"""Sort in either asc or desc order. The default is asc order"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetListOfNpaPolicyGroups200ApplicationJSON:
    can_be_edited_deleted: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_be_edited_deleted'), 'exclude': lambda f: f is None }})
    group_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_id'), 'exclude': lambda f: f is None }})
    group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_name'), 'exclude': lambda f: f is None }})
    group_pinned_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_pinned_id'), 'exclude': lambda f: f is None }})
    group_prod_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_prod_id'), 'exclude': lambda f: f is None }})
    group_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_type'), 'exclude': lambda f: f is None }})
    modify_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modify_time'), 'exclude': lambda f: f is None }})
    modify_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modify_type'), 'exclude': lambda f: f is None }})
    




@dataclasses.dataclass
class GetListOfNpaPolicyGroupsResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    get_list_of_npa_policy_groups_200_application_json_objects: Optional[list[GetListOfNpaPolicyGroups200ApplicationJSON]] = dataclasses.field(default=None)
    r"""successful operation"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    r"""Raw HTTP response; suitable for custom response parsing"""
    

