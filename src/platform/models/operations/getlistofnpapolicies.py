"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from platform import utils
from typing import Optional



@dataclasses.dataclass
class GetListOfNpaPoliciesRequest:
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Return values only from specified fields"""
    filter: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': True }})
    r"""Query string based on query operaters"""
    limit: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Max number of policies to retrieve. Default will be all policies."""
    offset: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""The offset of the first policy in the list to retrieve."""
    sortby: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortby', 'style': 'form', 'explode': True }})
    r"""Sort retrieved policies by specified field. Default is policy id"""
    sortorder: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortorder', 'style': 'form', 'explode': True }})
    r"""Sort in either asc or desc order. The default is asc order"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetListOfNpaPolicies200ApplicationJSONRuleDataMatchCriteriaAction:
    action_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action_name'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetListOfNpaPolicies200ApplicationJSONRuleDataPrivateAppsWithActivitiesActivities:
    activity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activity'), 'exclude': lambda f: f is None }})
    list_of_constraints: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('list_of_constraints'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetListOfNpaPolicies200ApplicationJSONRuleDataPrivateAppsWithActivities:
    activities: Optional[list[GetListOfNpaPolicies200ApplicationJSONRuleDataPrivateAppsWithActivitiesActivities]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activities'), 'exclude': lambda f: f is None }})
    app_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appName'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetListOfNpaPolicies200ApplicationJSONRuleData:
    access_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('access_method'), 'exclude': lambda f: f is None }})
    b_negate_net_location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('b_negateNetLocation'), 'exclude': lambda f: f is None }})
    b_negate_src_countries: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('b_negateSrcCountries'), 'exclude': lambda f: f is None }})
    classification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classification'), 'exclude': lambda f: f is None }})
    excluded_users: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludedUsers'), 'exclude': lambda f: f is None }})
    external_dlp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_dlp'), 'exclude': lambda f: f is None }})
    json_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('json_version'), 'exclude': lambda f: f is None }})
    match_criteria_action: Optional[GetListOfNpaPolicies200ApplicationJSONRuleDataMatchCriteriaAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('match_criteria_action'), 'exclude': lambda f: f is None }})
    net_location_obj: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('net_location_obj'), 'exclude': lambda f: f is None }})
    policy_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policy_type'), 'exclude': lambda f: f is None }})
    private_app_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateAppIds'), 'exclude': lambda f: f is None }})
    private_apps: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateApps'), 'exclude': lambda f: f is None }})
    private_apps_with_activities: Optional[list[GetListOfNpaPolicies200ApplicationJSONRuleDataPrivateAppsWithActivities]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateAppsWithActivities'), 'exclude': lambda f: f is None }})
    private_app_tag_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateAppTagIds'), 'exclude': lambda f: f is None }})
    private_app_tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateAppTags'), 'exclude': lambda f: f is None }})
    show_dlp_profile_action_table: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('show_dlp_profile_action_table'), 'exclude': lambda f: f is None }})
    src_countries: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('srcCountries'), 'exclude': lambda f: f is None }})
    users: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('users'), 'exclude': lambda f: f is None }})
    user_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userType'), 'exclude': lambda f: f is None }})
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetListOfNpaPolicies200ApplicationJSON:
    group_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_id'), 'exclude': lambda f: f is None }})
    rule_data: Optional[GetListOfNpaPolicies200ApplicationJSONRuleData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rule_data'), 'exclude': lambda f: f is None }})
    rule_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rule_id'), 'exclude': lambda f: f is None }})
    rule_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rule_name'), 'exclude': lambda f: f is None }})
    




@dataclasses.dataclass
class GetListOfNpaPoliciesResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    get_list_of_npa_policies_200_application_json_objects: Optional[list[GetListOfNpaPolicies200ApplicationJSON]] = dataclasses.field(default=None)
    r"""successful operation"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    r"""Raw HTTP response; suitable for custom response parsing"""
    

